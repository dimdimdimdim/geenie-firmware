SYSCALL_DECLARE( malloc,					(void *),							(size_t size) )
SYSCALL_DECLARE( realloc,					(void *),							(void *ptr, size_t size) )
SYSCALL_DECLARE( free,						(void),								(void *ptr) )
SYSCALL_DECLARE( gcAlloc,					(void *),							(void *&ptr, size_t size) )
SYSCALL_DECLARE( addGlobalRef,				(void),								(GCGlobalItem *ref) )
SYSCALL_DECLARE( removeGlobalRef,			(void),								(GCGlobalItem *ref) )
SYSCALL_DECLARE( createThread,				(gc<Kernel::SysThread *>),			(Thread *userThread, size_t stackSize, int priority, bool privileged) )
SYSCALL_DECLARE( startThread,				(void),								(Kernel::SysThread *thread) )
SYSCALL_DECLARE( createThreadGroup,			(gc<Kernel::SysThreadGroup *>),		(ThreadGroup *userThreadGroup) )
SYSCALL_DECLARE( joinThreadGroup,			(void),								(Kernel::SysThreadGroup *group) )
SYSCALL_DECLARE( lockCriticalSection,		(void),								(CriticalSection *section) )
SYSCALL_DECLARE( unlockCriticalSection,		(void),								(CriticalSection *section) )
SYSCALL_DECLARE( open,						(gc<Kernel::DeviceDescriptor *>),	(const String &name, unsigned long flags) )
SYSCALL_DECLARE( getDeviceName,				(gc<String>),						(Kernel::DeviceDescriptor *dev) )
SYSCALL_DECLARE( control,					(size_t),							(Kernel::DeviceDescriptor *dev, int request, va_list args) )
SYSCALL_DECLARE( write,						(size_t),							(Kernel::DeviceDescriptor *dev, const void *data, size_t len) )
SYSCALL_DECLARE( read,						(size_t),							(Kernel::DeviceDescriptor *dev, void *data, size_t len) )
SYSCALL_DECLARE( close,						(void),								(Kernel::DeviceDescriptor *dev) )
SYSCALL_DECLARE( isWaitFlagSet,				(bool),								(Object *obj, unsigned int flag) )
SYSCALL_DECLARE( sleep,						(void),								(long msec) )
SYSCALL_DECLARE( wait,						(bool),								(const WaitList &objects, long msecTimeout) )
SYSCALL_DECLARE( createMessageQueue,		(gc<Kernel::MessageQueue *>),		(size_t maxmsgs) )
SYSCALL_DECLARE( sendMessage,				(bool),								(Kernel::MessageQueue *mq, Object *msg, bool nowait) )
SYSCALL_DECLARE( getMessage,				(gc<Object *>),						(Kernel::MessageQueue *mq, bool nowait) )
SYSCALL_DECLARE( createEvent,				(gc<Kernel::WaitableEvent *>),		(bool autoReset, bool wakeupAll, bool set) )
SYSCALL_DECLARE( setEvent,					(void),								(Kernel::WaitableEvent *evt) )
SYSCALL_DECLARE( resetEvent,				(void),								(Kernel::WaitableEvent *evt) )
SYSCALL_DECLARE( getTickCount,				(unsigned long),					() )
